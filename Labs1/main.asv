clc 
close all
clear all


% %% 2 EXERCICES
% 
% %% 2.1 Images and color tables

[trees,trees_color] = imread('Images/trees.tif');
% %% trees is indexed format
lena = imread('Images/lena.tif');
% %% lena is truecolor

% 2.1.1
figure('Name', 'Images and color tables');
subplot(1,2,1); 
imshow(lena)
title('Lena Color Image')

subplot(1,2,2); 
imshow(trees,trees_color)
title('Tree Color Image')
% 
% %% 2.1.2
lena = rgb2gray(lena);
lena_inverted = 255-lena;
trees_color_gray = ind2gray(trees, trees_color);
trees_color_gray_inverted = 255 - trees_color_gray;

figure('Name', 'Grayscale images');
subplot(2,2,1);
imshow(lena);
title('Lena grayscale')

subplot(2,2,2);
imshow(lena_inverted)
title('Lena grayscale inverted')

subplot(2,2,3);
imshow(trees_color_gray)
title('Trees grayscale')

subplot(2,2,4);
imshow(trees_color_gray_inverted)
title('Trees grayscale inverted')
%% 2.1.3

trees_color_modified = rgb_power(trees_color, 2);

figure('Name', 'Trees colors modified');
subplot(1, 2, 1)
subimage(trees,trees_color_modified)
title('Setting gamma to 2')

trees_color_modified = rgb_power(trees_color, 0.5);
subplot(1, 2, 2)
subimage(trees,trees_color_modified)
title('Setting gamme to 0.5')
%%-->  it add contrast in the image, the utility of  the gamma correction is to enhance the contrast of the images


% %%2.1.4
chessboard_indexed = [ 1 2 ; 2 1];
chessboard_indexed = repmat(chessboard_indexed, 4,4);
chess_map = [0,0,1 ; %blue
             1,1,0] ;%yellow

chessboard_rgb = zeros(8,8,3);
% Setting the blue to (0, 0, 1)
chessboard_rgb(1:2:end,1:2:end,3) = 1;
chessboard_rgb(2:2:end,2:2:end,3) = 1;
% Setting the yellow to (1, 1, 0)
chessboard_rgb(1:2:end,2:2:end,1) = 1;
chessboard_rgb(2:2:end,1:2:end,1) = 1;
chessboard_rgb(1:2:end,2:2:end,2) = 1;
chessboard_rgb(2:2:end,1:2:end,2) = 1;

figure('Name', 'Chessboard generation');
subplot(1, 2, 1)
subimage(chessboard_indexed, chess_map)
axis off
title('Using indexed format')
imwrite(chessboard_indexed,chess_map, 'Images/chessboard_indexed.tif')

subplot(1, 2, 2)
imshow(chessboard_rgb)
title('Using true color')
imwrite(chessboard_rgb, 'Images/chessboard_true_color.tif')

%% 2.2 Image quantization
lena2=imread('Images/lena-y.png');

figure('Name', 'Image quantization');
for i=1:7
    lena_quant = quantization(lena2, 2^i);
    subplot(3,4,i)
    imshow(lena_quant)
    title(strcat(['quantstep= ' int2str(2^i)]))
end
% false contour appears with quant_step = 16

%% 2.3 Filtering
filter1D = [0.0357;0.2411;0.4464;0.2411;0.0357] ;
filter2D = filter1D * filter1D.';
gold = imread('Images/gold-text.png');
gold_filtered = imfilter(gold, filter2D);

figure('Name', 'Low pass filter');
subplot(1, 3, 1)
freqz2(filter2D)
title('Frequency response')
subplot(1, 3, 2);
imshow(gold)
title('Original image')
subplot(1, 3, 3);
imshow(gold_filtered)
title('Filtered image')

filterv1 = 1/6 * [ -1 -4 -1;
                   -4 26 -4;
                   -1 -4 -1];
gold_filtered = imfilter(gold, filterv1);

figure('Name', 'High pass filter')
subplot(1, 3, 1)
freqz2(filterv1)
title('Frequency response')
subplot(1,2,1);
imshow(gold)
subplot(1,2,2);
imshow(gold_filtered)


%% Correlation

%% Resampling 
% sub = imread('Images/sub4.tif');
% sub2 = sampling(sub,2);
% sub4 = sampling(sub,4);
% 
% figure(15)
% subplot(1,3,1)
% imshow(sub)
% subplot(1,3,2)
% imshow(sub2)
% subplot(1,3,3)
% imshow(sub4)

%% Phase and magnitude of 2DFT
% lena_y = im2double(imread('Images/lena-y.png'));
% 
% lena_y_fft=fftshift(fft2(lena_y));
% real_lena = real(lena_y_fft);
% real_lena_invert = ifft2(real_lena);
% 
% 
% imag_lena = imag(lena_y_fft);
% imag_lena_invert = abs(ifft2(imag_lena));
% 
% figure(16)
% subplot(1,2,1)
% imshow(real_lena_invert)
% subplot(1,2,2)
% imshow(imag_lena_invert)
% 
% phase_lena_y = angle(lena_y_fft);
% magnitude_lena_y = abs(lena_y_fft);
% 
% magnitude_lena = ifft2(abs(lena_y_fft));
% phase_lena = ifft2(exp(i*angle(lena_y_fft)));
% 
% 
% figure(17)
% subplot(1,2,1)
% imshow(magnitude_lena)
% subplot(1,2,2)
% imshow(phase_lena)


%% Weber law

% L1 = 20;
% L2 = 100;
% LB = 10;
% a=weber(L1,L2,LB);
% figure(18)
% imagesc(a)
% colormap('gray')
% 
% 
% for L1=1:256
%     for L2=1:256
%         delta = L2 - L1
%         alpha_value = delta/
%     end
% end

